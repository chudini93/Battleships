@page "/"
@using HappyTeam.Battleships.Services.Core.Enums
@using HappyTeam.Battleships.Services.Core.Models
@using HappyTeam.Battleships.Services.Interfaces
@inject IGameService GameService

<header><h1>@Title</h1></header>
@if (GameService.IsStarted)
{
    <h3>Turn: <b>@GameService.Turn.ToString()</b></h3>
}
@if(GameService.IsGameOver || !GameService.IsStarted)
{
    <button class="btn btn-primary" @onclick="StartGameAsync">Start New Game</button>
}
<div class="content">
    @if (GameService.IsStarted)
    {
        <main>
            <left>
                <div class="title">@GameService.Player1.Name</div>
                <div class="board">
                    @foreach (CellInfo cellItem in GameService.Player1.Board)
                    {
                        <CustomCell State="cellItem.Status" ShipName="@cellItem.ShipLabel"></CustomCell>
                    }
                </div>
            </left>
            <right>
                <div class="title">@GameService.Player2.Name</div>
                <div class="board">
                    @foreach (CellInfo cellItem in GameService.Player2.Board)
                    {
                        <CustomCell State="cellItem.Status" ShipName="@cellItem.ShipLabel"></CustomCell>
                    }
                </div>
            </right>
        </main>
        <footer>
            <h3 class="font-weight-bold">Logs:</h3>
            @foreach (string log in GameService.Logs.Reverse())
            {
                <pre>@log</pre>
            }
        </footer>
    }
</div>

@code
{
    private int _thinkingTimeInMilliseconds;

    private string Title { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Title = "Battleships";
        _thinkingTimeInMilliseconds = 100;
    }

    public async Task StartGameAsync()
    {
        GameService.StartNewGame(GameVersions.Milton);
        await WaitAndRefreshUI(1000);

        GameService.PlaceShipsRandomly(GameService.Player1);
        await WaitAndRefreshUI(2000);
        GameService.PlaceShipsRandomly(GameService.Player2);

        await WaitAndRefreshUI(5000);

        await SimulateGameplayAsync(_thinkingTimeInMilliseconds);
    }

    public async Task SimulateGameplayAsync(int thinkingTimeInMilliseconds)
    {
        do
        {
            switch (GameService.Turn)
            {
                case Players.Player1:
                    GameService.FireRandomly(GameService.Player2);
                    break;
                case Players.Player2:
                    GameService.FireRandomly(GameService.Player1);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            await WaitAndRefreshUI(thinkingTimeInMilliseconds);
        } while (!GameService.IsGameOver);
    }

    private async Task WaitAndRefreshUI(int timeInMilliseconds)
    {
        await Task.Delay(timeInMilliseconds);
        StateHasChanged();
    }
}
